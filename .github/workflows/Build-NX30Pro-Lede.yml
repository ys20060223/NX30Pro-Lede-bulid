# 定义工作流名称
name: Build OpenWrt

# 定义触发工作流的条件
on:
  repository_dispatch:  # 当仓库接收到dispatch事件时触发
  workflow_dispatch:    # 当手动触发工作流时
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  watch:
    types: [started]    # 当有人开始watch仓库时触发

# 设置环境变量
env:
  REPO_URL: https://github.com/coolsnowwolf/lede   # 源代码仓库地址
  REPO_BRANCH: master                              # 分支名称
  UPLOAD_BIN_DIR: true                             # 是否上传bin目录
  UPLOAD_FIRMWARE: true                            # 是否上传固件
  UPLOAD_RELEASE: true                             # 是否上传到Release
  DIY_SH: diy.sh                                    # 自定义脚本文件
  TZ: Asia/Shanghai                                # 时区设置

# 定义构建作业
jobs:
  build:
    runs-on: Ubuntu-22.04  # 运行在Ubuntu 22.04的虚拟机上

    steps:
    - name: Checkout  # 检出代码
      uses: actions/checkout@main

    - name: Initialization environment  # 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 清理不必要的文件和安装依赖
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://is.gd/depends_ubuntu_2204)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E apt-get -qq install libfuse-dev
        sudo timedatectl set-timezone "$TZ"
        sudo chmod 777 /mnt

    - name: Clone source code  # 克隆源代码
      working-directory: /mnt
      run: |
        # 显示磁盘空间信息，克隆源代码并创建软链接
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /mnt/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H<br/>")
        VER=$(grep -E "='R.+" ./package/lean/default-settings/files/zzz-default-settings | cut -f2 -d"'")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "VER=$VER" >> $GITHUB_ENV

    - name: Cache  # 使用缓存
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt

    - name: Update feeds  # 更新feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: File Diy Patch  # 应用自定义补丁
      run: |
        chmod +x $DIY_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SH

    - name: Generate configuration file  # 生成配置文件
      run: |
        cd openwrt
        rm -f ./.config*
        touch ./.config

        # 固件定制部分开始
        # ...

        # 固件定制部分结束

        sed -i 's/^[ \t]*//g' ./.config
        make defconfig

    - name: SSH connection to Actions  # SSH连接到Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package  # 下载软件包
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware  # 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage  # 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory  # 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files  # 组织文件
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/packages
        tar -zcvf Packages.tar.gz ./*
        cp Packages.tar.gz $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"

    - name: Calculate MD5  # 计算MD5
      run: |
        cd ${{ env.FIRMWARE }} && rm -rf sha256sums
        MD5=$(md5sum * | sed ':a;N;$!ba;s/\n/<br>/g')
        echo "MD5=$MD5" >> $GITHUB_ENV

    - name: Upload firmware directory  # 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload OpenWrt Firmware to Release  # 上传固件到Release
      id: release
      uses: ncipollo/release-action@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        name: R${{ steps.organize.outputs.release_tag }} for NX30Pro
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ steps.organize.outputs.release_tag }}
        commit: main
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE }}/*
        body: |
          - 版本号：${{ env.VER }}
          - 默认IP：192.168.10.1
          - 默认密码：password
          - 当前使用版本:【编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/lede)更新记录】   
          - 下载后请仔细校验MD5，如不正确请重新下载
          ${{ env.useVersionInfo }}
          
          `md5sum`
          > ${{ env.MD5 }}

    - name: Delete workflow runs  # 删除工作流运行记录
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases  # 删除旧的Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
